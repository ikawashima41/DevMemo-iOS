default_platform(:ios)

platform :ios do

  before_all do
    clear_derived_data(derived_data_path: "./DerivedData")
    sh "rm -rf ../build"

    carthage(
      command: "bootstrap",
      platform: "iOS",
      configuration: "Debug"
    )

    if is_ci?
      setup_circle_ci
      ENV["SLACK_URL"] = "https://hooks.slack.com/services/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"
      create_keychain(
        name: ENV['MATCH_KEYCHAIN_NAME'],
        password: ENV['MATCH_KEYCHAIN_PASSWORD'],
        default_keychain: true,
        timeout: 1800,
        unlock: true,
        lock_when_sleeps: false
      )
    end
  end

  desc "Description of what the lane does"
  lane :beta do

    match(
      keychain_name: ENV['MATCH_KEYCHAIN_NAME'],
      keychain_password: ENV['MATCH_KEYCHAIN_PASSWORD'],
      readonly: true
    )
    gym
    upload_to_firebase

    ##upload_symbols_to_crashlytics
    ## upload_to_deploygate()
  end

  lane :release do

    if prompt(text: "バージョンを上げますか？", boolean: true)
        update_version
    end

    if prompt(text: "ビルド番号を上げますか？", boolean: true)
        increment_build
    end

    match(type: "app-store", readonly: true)

    gym

    deliver
  end

  lane :dsym do
    download_dsyms(version: 'latest')
    upload_symbols_to_crashlytics(gsp_path: "[path to GoogleService-Info.plist]")
    clean_build_artifacts
  end

  desc "firebase login && pluginの導入が必要"
  private_lane :upload_to_firebase do
    firebase_app_distribution(
        app: "1:1074101985837:android:01600fb84f8188ee38cea4",
        testers: "i.kawashima41.dev@gmai.com",
        ipa_path: "./build/ipa/DevMemo.ipa",
        firebase_cli_path: "./node_modules/.bin/firebase"
    )
  end

  lane :test do
    puts "====================="
    puts "test lane"
    puts "====================="
  end

  private_lane :upload_to_deploygate do
     deploygate(
       api_token: "28d444d5bd8c2bc34db0eba85896f2b53a907c85",
       user: "ikawashima41"
      )
  end

  # after_all do |lane|
  #   if is_ci?
  #     if lane == :release
  #       slack(
  #         message: "Releaseに成功しました⚡"
  #       )
  #     else
  #       slack(
  #         message: "テスト配信に成功しました"
  #       )
  #     end
  #   end
  # end

  # error do |lane, exception|
  #   if is_ci?
  #     slack(
  #       message: exception.message,
  #       success: false
  #     )
  #   else
  #     puts exception.message
  #   end
  # end
end
